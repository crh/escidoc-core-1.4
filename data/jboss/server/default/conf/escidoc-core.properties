# /*
#  * CDDL HEADER START
#  *
#  * The contents of this file are subject to the terms of the
#  * Common Development and Distribution License, Version 1.0 only
#  * (the "License").  You may not use this file except in compliance
#  * with the License.
#  *
#  * You can obtain a copy of the license at license/ESCIDOC.LICENSE
#  * or http://www.escidoc.de/license.
#  * See the License for the specific language governing permissions
#  * and limitations under the License.
#  *
#  * When distributing Covered Code, include this CDDL HEADER in each
#  * file and include the License file at license/ESCIDOC.LICENSE.
#  * If applicable, add the following below this CDDL HEADER, with the
#  * fields enclosed by brackets "[]" replaced with your own identifying
#  * information: Portions Copyright [yyyy] [name of copyright owner]
#  *
#  * CDDL HEADER END
#  */

# /*
#  * Copyright 2006-2007 Fachinformationszentrum Karlsruhe Gesellschaft
#  * fuer wissenschaftlich-technische Information mbH and Max-Planck-
#  * Gesellschaft zur Foerderung der Wissenschaft e.V.
#  * All rights reserved.  Use is subject to license terms.
#  */


# ==================================================
#  eSciDoc Infrastructure Properties
# ==================================================
#
#  This file contains the default-properties used by the eSciDoc-Core-Infrastructure.
#
#  If you want to change some of the properties to values other than the defaults,
#  you can just change them in this file
#  or you can overwrite them by redefining them in a file with name escidoc-core.custom.properties,
#  that has to be located in the same directory this file is located.
#
#  Properties defined in the file escidoc-core.custom.properties
#  overwrite the values of the properties defined in this file.
#
#  Redefining them in the file escidoc-core.custom.properties makes it
#  easier for you to see what properties you changed
#  and easier to reset the properties to their default-values.
#

#PROPERTIES USED BY SEARCH + INDEXING#####################################
# Directory where configuration for search + indexing is located
# Path relative to directory defined in Classpath (eg config-directory of JBoss)
# leading and tailing slashes are internally appended!
search.properties.directory = search/config

# url of the fedoragsearch
gsearch.url = http://localhost:8080/fedoragsearch/rest

# Persistent handle in internal database for gsearch.fedoraUser
gsearch.fedoraPass =

# Defines if automatic indexing of objects is internally triggered by eSciDoc-Core-Infrastructure
# If set to false, indexing has to get triggered via the Admin-Interface manually.
escidoc-core.notify.indexer.enabled = true

# Defines the timeout of the indexer-request.
# Set it pretty long as some indexing-requests 
# for very large fulltexts need a long time to index. 
# Also optimize takes quite lots of time.
escidoc-core.om.indexer.request.timeout=10800000
############################################################################

# Fedora connnection settings, needed for the
# Object Manager to access the repository.
fedora.url = http://localhost:8082/fedora
fedora.user = fedoraAdmin
fedora.password = fedoraAdmin
#
# Base URL of the eSciDoc Infrastructure, typically
# the host name of the machine the servlet container
# is running, and the port on which the servlet
# container listens for incoming HTTP requests
escidoc-core.baseurl = http://localhost:8080
#
# URL that points to the eSciDoc Infrastructure for
# the eSciDoc Infrastructure itself, typically
# the host name is ''localhost''. The important part
# is the port on which the servlet
# container listens for incoming HTTP requests. The
# latter one will differ from the port in ''escidoc-core.baseurl''
# when an Apache Webserver is used in front of
# the application server.
escidoc-core.selfurl = http://localhost:8080

# Base URL of the JNDI of the eSciDoc Infrastructure
escidoc-core.default.jndi.url = jnp://localhost:1099

#
# URL that points to the SRW serlvet
#
srw.url = http://localhost:8080/srw

#
# URL that points to the Admin Tool (used in welcome page)
#
admin-tool.url = /AdminTool?escidocurl=http://localhost:8080

#
# URL that points to the eSciDoc Browser (used in welcome page)
#
#escidoc-browser.url = 

#
# URL that points to the JMS TCP connector
#
jms.url = tcp://localhost:61616

# URLS of JNDIs of other core-services
# Only define these properties
# if the core-services are deployed over different machines
#de.escidoc.core.sm.service.provider.url = jnp://machine1:1099
#de.escidoc.core.om.service.provider.url = jnp://machine2:1099

#
# Security for MessageQueues
#
# Currently, message queues are used for indexing of objects. Because the services
# of the eSciDoc infrastructure may be deployed in a distributed environment, you
# should secure access to the message queues by user-id and password. This will help
# preventing unauthorized read/write access to the queue. In case you run a distributed
# deployment of the eSciDoc infrastructure, please make sure that user-id and password
# are consistent across all machines (each having its own instance of this file).
escidoc-core.queue.user=queue-user
escidoc-core.queue.password=queue-password

# Path to internally used schemas
escidoc-core.xsd-path = /xsd

# Optional XSLT stylesheet for pretty-printing the
# output of the REST API. You can replace this with
# your own XSLT stylesheet if you want to modify the
# appearance of output.
# CAVEAT: changing this stylesheet has no impact
# whatsoever on the GUI of solutions running on top
# of the eSciDoc Infrastructure
escidoc-core.xslt.std = /xsl/Resource2Html.xsl

# defines if content (not binary) will be delivered gzip compressed
escidoc-core.compressionIsAccepted = true

#host + port if escidoc-framework retrieves something
#from somewhere else
#and has to connect via proxy
#eg: gsearch stylesheet, external-managed fulltexts, openId-login
escidoc-core.proxyHost =
escidoc-core.proxyPort =

#no proxy for following hosts, separated with |
#eg localhost|fiz-karlsruhe.de
escidoc-core.nonProxyHosts =

# Administrator eMail
escidoc-core.admin-email = repository-administrator@localhost.de

# Name of the Repository
escidoc-core.repository-name = Escidoc Institutional Repository

# Prefix for eSciDoc identifiers. Identifiers have
# the form <prefix>:nnnn, e.g. escidoc:12345. You
# may change the prefix to any string literal
# conforming to this pattern: [a-z]+[0-9a-z]*
# Changing the prefix after installation requires
# additionally to add the new prefix to fedora.fcfg!
escidoc-core.identifier.prefix = escidoc

# Number of object ids that will be prefetched from
# the back end at one time. Setting this to 0 disables
# prefetching. In this case, every time object IDs are
# needed, the backend needs to be contacted for new IDs.
# Values > 0 than can improve the performance, but may
# lead to "holes" in the numbering of new objects.
# The default value is 1000.
escidoc-core.identifier.numberPrefetched=100

# The lifetime defines
# how long a once authenticated user can access the
# infrastructure without re-authenticating.
# lifetime is reset to the defined value with each request of the user.
escidoc-core.userHandle.lifetime = 3600000

# The user handle is stored in a cookie. The cookie
# lifetime defines how long the cookie is kept on the
# client side (e.g., in the user's browser). A value
# of -1 will force the browser to delete the cookie
# as soon as the browser application terminates.
escidoc-core.userHandle.cookie.lifetime = -1

# The version of the cookie specification used for the created
# eSciDoc user handle cookie (netscape or rfc2109). Defaults to netscape
escidoc-core.userHandle.cookie.version = netscape

# The User Account Handler runs a background thread
# which removes stale user handles from the cache.
# This property sets the time inbetween two invocations
# of this thread. It defaults to 1 hour (3600000ms).
# Note: The first clean up will start after the first
# access to an infrastructure service.
escidoc-core.aa.cleanup.period=3600000

# The name of the user-attribute that defines
# the organizational-unit the user belongs to.
# used to resolve the ou-hierarchy for aa
escidoc-core.aa.attribute-name.ou=o

# The name of the login-attribute that defines
# the common name of the user when logging in via Shibboleth.
# used to fill field name in table aa.user_account
#
escidoc-core.aa.attribute-name.common-name=cn

# The name of the login-attribute that defines
# the unique loginname of the user when logging in via Shibboleth.
# used to fill field loginname in table aa.user_account
#
escidoc-core.aa.attribute-name.persistent-id=eduPersonPrincipalName

#
# Default content model for table of content objects
# Do not change this value!
escidoc-core.toc.content-model = escidoc:toc
#
# PID Generator Values
#
#
# default namespace is hdl (usually not to alter)
escidoc-core.PidSystem.namespace = hdl
escidoc-core.PidSystem.separator = /
#
# comment out the following two lines if the  PID should be used
# As default is the dummy PID generator activated.
#
escidoc-core.PidSystemFactory = de.escidoc.core.common.persistence.impl.DummyPIDGeneratorFactory
escidoc-core.dummyPid.globalPrefix = someHandle
#
# uncomment following line to use the PID Manager as PID service backend
#escidoc-core.PidSystemFactory = de.escidoc.core.common.persistence.impl.PIDManagerRESTServiceFactory
#
# set parameter for the PID Managment service
#
escidoc-core.PidSystemRESTService.host = http://localhost:8080/pidmanager/pid/handle/
escidoc-core.PidSystemRESTService.user = pid-user
escidoc-core.PidSystemRESTService.password = pid-password
escidoc-core.PidSystem.globalPrefix = demo
#
# PID behavior
#
# This should be part of the content model; meanwhile
# the behavior is defined here on instance level. You
# can define different behaviors for items and containers.
# Additionally, you may differentiate between Object PIDs
# and Version PIDs.
#
# setPidBeforeRelease : Allow PID setting before an object/version is released
# setPidAfterRelease  : Allow PID setting after an object/version is released
# releaseWithoutPid   : Allow release of an object/version without PID
#
cmm.Item.contentPid.setPidBeforeRelease = true
cmm.Item.contentPid.setPidAfterRelease = true
cmm.Item.contentPid.releaseWithoutPid = true
#
cmm.Item.objectPid.setPidBeforeRelease = true
cmm.Item.objectPid.setPidAfterRelease = false
cmm.Item.objectPid.releaseWithoutPid = false
#
cmm.Item.versionPid.setPidBeforeRelease = true
cmm.Item.versionPid.setPidAfterRelease = false
cmm.Item.versionPid.releaseWithoutPid = false
#
cmm.Container.objectPid.setPidBeforeRelease = true
cmm.Container.objectPid.setPidAfterRelease = false
cmm.Container.objectPid.releaseWithoutPid = false
#
cmm.Container.versionPid.setPidBeforeRelease = true
cmm.Container.versionPid.setPidAfterRelease = false
cmm.Container.versionPid.releaseWithoutPid = false
#
#
# id of the statistic-scope used by the framework
sm.framework.scope.id = escidoc:scope1

#
# JDBC Properties
#

#
# mysql jdbc settings
#
#escidoc-core.datasource.url=jdbc:mysql://localhost:3306/
#escidoc-core.datasource.driverClassName=com.mysql.jdbc.Driver
#escidoc-core.datasource.username=root
#escidoc-core.datasource.password=mysql

#
# postgresql jdbc settings
#
escidoc-core.datasource.url=jdbc:postgresql://localhost:5432/escidoc-core
escidoc-core.datasource.driverClassName=org.postgresql.Driver
escidoc-core.datasource.username=escidoc
escidoc-core.datasource.password=escidoc
# Determines how many connections at a time the DB pool will try to acquire when
# the pool is exhausted.
escidoc-core.datasource.acquireIncrement=3
# Defines how many times the DB pool will try to acquire a new Connection from
# the database before giving up. If this value is less than or equal to zero,
# the DB pool will keep trying to fetch a Connection indefinitely.
escidoc-core.datasource.acquireRetryAttempts=0
# Milliseconds, time DB pool will wait between acquire attempts.
escidoc-core.datasource.acquireRetryDelay=1000
# The JDBC spec is unforgivably silent on what should happen to unresolved,
# pending transactions on Connection close. the DB pool's default policy is to
# rollback any uncommitted, pending work. (I think this is absolutely,
# undeniably the right policy, but there is no consensus among JDBC driver
# vendors.) Setting autoCommitOnClose to true causes uncommitted pending
# work to be committed, rather than rolled back on Connection close.
escidoc-core.datasource.autoCommitOnClose=false
# If true, a pooled DataSource will declare itself broken and be permanently
# closed if a Connection cannot be obtained from the database after making
# acquireRetryAttempts to acquire one. If false, failure to obtain a
# Connection will cause all Threads waiting for the pool to acquire a
# Connection to throw an Exception, but the DataSource will remain valid,
# and will attempt to acquire again following a call to getConnection().
escidoc-core.datasource.breakAfterAcquireFailure=false
# The number of milliseconds a client calling getConnection() will wait for
# a Connection to be checked-in or acquired when the pool is exhausted.
# Zero means wait indefinitely. Setting any positive value will cause the
# getConnection() call to time-out and break with an SQLException after the
# specified number of milliseconds.
escidoc-core.datasource.checkoutTimeout=0
# If this is a number greater than 0, the DB pool will test all idle, pooled
# but unchecked-out connections, every this number of seconds.
escidoc-core.datasource.idleConnectionTestPeriod=60
# Number of Connections a pool will try to acquire upon startup. Should be
# between minPoolSize and maxPoolSize.
escidoc-core.datasource.initialPoolSize=3
# Seconds, effectively a time to live. A Connection older than
# maxConnectionAge will be destroyed and purged from the pool. This differs
# from maxIdleTime in that it refers to absolute age. Even a Connection
# which has not been much idle will be purged from the pool if it exceeds
# maxConnectionAge. Zero means no maximum absolute age is enforced.
escidoc-core.datasource.maxConnectionAge=0
# Seconds a Connection can remain pooled but unused before being discarded.
# Zero means idle connections never expire.
escidoc-core.datasource.maxIdleTime=0
# Number of seconds that Connections in excess of minPoolSize should be
# permitted to remain idle in the pool before being culled. Intended for
# applications that wish to aggressively minimize the number of open
# Connections, shrinking the pool back towards minPoolSize if, following a
# spike, the load level diminishes and Connections acquired are no longer
# needed. If maxIdleTime is set, maxIdleTimeExcessConnections should be
# smaller if the parameter is to have any effect. Zero means no
# enforcement, excess Connections are not idled out.
escidoc-core.datasource.maxIdleTimeExcessConnections=0
# Maximum number of Connections a pool will maintain at any given time.
escidoc-core.datasource.maxPoolSize=5
# The size of the DB pools global PreparedStatement cache. If both
# maxStatements and maxStatementsPerConnection  are zero, statement
# caching will not be enabled. If maxStatements is zero but
# maxStatementsPerConnection  is a non-zero value, statement caching
# will be enabled, but no global limit will be enforced, only the
# per-connection maximum. maxStatements controls the total number of
# Statements cached, for all Connections. If set, it should be a fairly
# large number, as each pooled Connection requires its own, distinct flock
# of cached statements. As a guide, consider how many distinct
# PreparedStatements are used frequently in your application, and multiply
# that number by maxPoolSize to arrive at an appropriate value. Though
# maxStatements is the JDBC standard parameter for controlling statement
# caching, users may find the DB pools alternative maxStatementsPerConnection
# more intuitive to use.
escidoc-core.datasource.maxStatements=100
# The number of PreparedStatements the DB pool will cache for a single pooled
# Connection. If both maxStatements and maxStatementsPerConnection  are zero,
# statement caching will not be enabled. If maxStatementsPerConnection is
# zero but maxStatements  is a non-zero value, statement caching will be
# enabled, and a global limit enforced, but otherwise no limit will be set
# on the number of cached statements for a single Connection. If set,
# maxStatementsPerConnection should be set to about the number distinct
# PreparedStatements that are used frequently in your application, plus
# two or three extra so infrequently statements don't force the more
# common cached statements to be culled. Though maxStatements is the JDBC
# standard parameter for controlling statement caching, users may find
# maxStatementsPerConnection more intuitive to use.
escidoc-core.datasource.maxStatementsPerConnection=12
# Minimum number of Connections a pool will maintain at any given time.
escidoc-core.datasource.minPoolSize=1
# The DB pool is very asynchronous. Slow JDBC operations are generally
# performed by helper threads that don't hold contended locks.
# Spreading these operations over multiple threads can significantly
# improve performance by allowing multiple operations to be performed
# simultaneously.
escidoc-core.datasource.numHelperThreads=6
# Defines the query that will be executed for all connection tests.
# Defining a preferredTestQuery that will execute quickly in your
# database may dramatically speed up Connection tests.
escidoc-core.datasource.preferredTestQuery=SELECT 1
# Maximum time in seconds before user configuration constraints are enforced.
# Determines how frequently maxConnectionAge, maxIdleTime,
# maxIdleTimeExcessConnections, unreturnedConnectionTimeout are enforced.
# The DB pool periodically checks the age of Connections to see whether
# they've timed out. This parameter determines the period. Zero means
# automatic: A suitable period will be determined by the DB pool.
escidoc-core.datasource.propertyCycle=0
# If true, an operation will be performed asynchronously at every
# connection checkin to verify that the connection is valid. Use in
# combination with idleConnectionTestPeriod for quite reliable, always
# asynchronous Connection testing. Also, setting an preferredTestQuery
# will usually speed up all connection tests.
escidoc-core.datasource.testConnectionOnCheckin=false
# Use only if necessary. Expensive.  If true, an operation will be
# performed at every connection checkout to verify that the connection
# is valid. Better choice: verify connections periodically using
# idleConnectionTestPeriod. Also, setting an automaticTestTable or
# preferredTestQuery will usually speed up all connection tests.
escidoc-core.datasource.testConnectionOnCheckout=false
# If set, if an application checks out but then fails to check-in
# a Connection within the specified period of time (in seconds), the pool
# will unceremoniously destroy() the Connection. This permits applications
# with occasional Connection leaks to survive, rather than eventually
# exhausting the Connection pool. And that's a shame. Zero means no timeout,
# applications are expected to close() their own Connections. Obviously, if
# a non-zero value is set, it should be to a value longer than any Connection
# should reasonably be checked-out. Otherwise, the pool will occasionally
# kill Connections in active use, which is bad.
escidoc-core.datasource.unreturnedConnectionTimeout=600


# Triplestore database settings
#
# These settings work for MPTStore, not Mulgara!
#
triplestore.datasource.url=jdbc:postgresql://localhost:5432/riTriples
triplestore.datasource.driverClassName=org.postgresql.Driver
triplestore.datasource.username=fedoraAdmin
triplestore.datasource.password=fedoraAdmin
triplestore.ddlgenerator.class=org.nsdl.mptstore.impl.postgres.PostgresDDLGenerator
# Determines how many connections at a time the DB pool will try to acquire when
# the pool is exhausted.
triplestore.datasource.acquireIncrement=3
# Defines how many times the DB pool will try to acquire a new Connection from
	# the database before giving up. If this value is less than or equal to zero,
# the DB pool will keep trying to fetch a Connection indefinitely.
triplestore.datasource.acquireRetryAttempts=0
# Milliseconds, time DB pool will wait between acquire attempts.
triplestore.datasource.acquireRetryDelay=1000
# The JDBC spec is unforgivably silent on what should happen to unresolved,
# pending transactions on Connection close. the DB pool's default policy is to
# rollback any uncommitted, pending work. (I think this is absolutely,
# undeniably the right policy, but there is no consensus among JDBC driver
# vendors.) Setting autoCommitOnClose to true causes uncommitted pending
# work to be committed, rather than rolled back on Connection close.
triplestore.datasource.autoCommitOnClose=false
# If true, a pooled DataSource will declare itself broken and be permanently
# closed if a Connection cannot be obtained from the database after making
# acquireRetryAttempts to acquire one. If false, failure to obtain a
# Connection will cause all Threads waiting for the pool to acquire a
# Connection to throw an Exception, but the DataSource will remain valid,
# and will attempt to acquire again following a call to getConnection().
triplestore.datasource.breakAfterAcquireFailure=false
# The number of milliseconds a client calling getConnection() will wait for
# a Connection to be checked-in or acquired when the pool is exhausted.
# Zero means wait indefinitely. Setting any positive value will cause the
# getConnection() call to time-out and break with an SQLException after the
# specified number of milliseconds.
triplestore.datasource.checkoutTimeout=0
# If this is a number greater than 0, the DB pool will test all idle, pooled
# but unchecked-out connections, every this number of seconds.
triplestore.datasource.idleConnectionTestPeriod=60
# Number of Connections a pool will try to acquire upon startup. Should be
# between minPoolSize and maxPoolSize.
triplestore.datasource.initialPoolSize=3
# Seconds, effectively a time to live. A Connection older than
# maxConnectionAge will be destroyed and purged from the pool. This differs
# from maxIdleTime in that it refers to absolute age. Even a Connection
# which has not been much idle will be purged from the pool if it exceeds
# maxConnectionAge. Zero means no maximum absolute age is enforced.
triplestore.datasource.maxConnectionAge=0
# Seconds a Connection can remain pooled but unused before being discarded.
# Zero means idle connections never expire.
triplestore.datasource.maxIdleTime=0
# Number of seconds that Connections in excess of minPoolSize should be
# permitted to remain idle in the pool before being culled. Intended for
# applications that wish to aggressively minimize the number of open
# Connections, shrinking the pool back towards minPoolSize if, following a
# spike, the load level diminishes and Connections acquired are no longer
# needed. If maxIdleTime is set, maxIdleTimeExcessConnections should be
# smaller if the parameter is to have any effect. Zero means no
# enforcement, excess Connections are not idled out.
triplestore.datasource.maxIdleTimeExcessConnections=0
# Maximum number of Connections a pool will maintain at any given time.
triplestore.datasource.maxPoolSize=15
# The size of the DB pools global PreparedStatement cache. If both
# maxStatements and maxStatementsPerConnection  are zero, statement
# caching will not be enabled. If maxStatements is zero but
# maxStatementsPerConnection  is a non-zero value, statement caching
# will be enabled, but no global limit will be enforced, only the
# per-connection maximum. maxStatements controls the total number of
# Statements cached, for all Connections. If set, it should be a fairly
# large number, as each pooled Connection requires its own, distinct flock
# of cached statements. As a guide, consider how many distinct
# PreparedStatements are used frequently in your application, and multiply
# that number by maxPoolSize to arrive at an appropriate value. Though
# maxStatements is the JDBC standard parameter for controlling statement
# caching, users may find the DB pools alternative maxStatementsPerConnection
# more intuitive to use.
triplestore.datasource.maxStatements=100
# The number of PreparedStatements the DB pool will cache for a single pooled
# Connection. If both maxStatements and maxStatementsPerConnection  are zero,
# statement caching will not be enabled. If maxStatementsPerConnection is
# zero but maxStatements  is a non-zero value, statement caching will be
# enabled, and a global limit enforced, but otherwise no limit will be set
# on the number of cached statements for a single Connection. If set,
# maxStatementsPerConnection should be set to about the number distinct
# PreparedStatements that are used frequently in your application, plus
# two or three extra so infrequently statements don't force the more
# common cached statements to be culled. Though maxStatements is the JDBC
# standard parameter for controlling statement caching, users may find
# maxStatementsPerConnection more intuitive to use.
triplestore.datasource.maxStatementsPerConnection=12
# Minimum number of Connections a pool will maintain at any given time.
triplestore.datasource.minPoolSize=3
# The DB pool is very asynchronous. Slow JDBC operations are generally
# performed by helper threads that don't hold contended locks.
# Spreading these operations over multiple threads can significantly
# improve performance by allowing multiple operations to be performed
# simultaneously.
triplestore.datasource.numHelperThreads=3
# Defines the query that will be executed for all connection tests.
# Defining a preferredTestQuery that will execute quickly in your
# database may dramatically speed up Connection tests.
triplestore.datasource.preferredTestQuery=SELECT 1
# Maximum time in seconds before user configuration constraints are enforced.
# Determines how frequently maxConnectionAge, maxIdleTime,
# maxIdleTimeExcessConnections, unreturnedConnectionTimeout are enforced.
# The DB pool periodically checks the age of Connections to see whether
# they've timed out. This parameter determines the period. Zero means
# automatic: A suitable period will be determined by the DB pool.
triplestore.datasource.propertyCycle=0
# If true, an operation will be performed asynchronously at every
# connection checkin to verify that the connection is valid. Use in
# combination with idleConnectionTestPeriod for quite reliable, always
# asynchronous Connection testing. Also, setting an preferredTestQuery
# will usually speed up all connection tests.
triplestore.datasource.testConnectionOnCheckin=false
# Use only if necessary. Expensive.  If true, an operation will be
# performed at every connection checkout to verify that the connection
# is valid. Better choice: verify connections periodically using
# idleConnectionTestPeriod. Also, setting an automaticTestTable or
# preferredTestQuery will usually speed up all connection tests.
triplestore.datasource.testConnectionOnCheckout=false
# If set, if an application checks out but then fails to check-in
# a Connection within the specified period of time (in seconds), the pool
# will unceremoniously destroy() the Connection. This permits applications
# with occasional Connection leaks to survive, rather than eventually
# exhausting the Connection pool. And that's a shame. Zero means no timeout,
# applications are expected to close() their own Connections. Obviously, if
# a non-zero value is set, it should be to a value longer than any Connection
# should reasonably be checked-out. Otherwise, the pool will occasionally
# kill Connections in active use, which is bad.
triplestore.datasource.unreturnedConnectionTimeout=600

#
# Hibernate Properties
#
# The transaction manager lookup class (application server specific). Possible
# entries are
# - org.hibernate.transaction.BESTransactionManagerLookup
# - org.hibernate.transaction.JBossTransactionManagerLookup
# - org.hibernate.transaction.JNDITransactionManagerLookup
# - org.hibernate.transaction.JOnASTransactionManagerLookup
# - org.hibernate.transaction.JOTMTransactionManagerLookup
# - org.hibernate.transaction.JRun4TransactionManagerLookup
# - org.hibernate.transaction.OC4JTransactionManagerLookup
# - org.hibernate.transaction.OrionTransactionManagerLookup
# - org.hibernate.transaction.ResinTransactionManagerLookup
# - org.hibernate.transaction.SunONETransactionManagerLookup
# - org.hibernate.transaction.WeblogicTransactionManagerLookup
# - org.hibernate.transaction.WebSphereExtendedJTATransactionLookup
# - org.hibernate.transaction.WebSphereTransactionManagerLookup
#
# Do not change this entry unless you deploy eSciDoc to an application
# server other than JBoss. This has never been tested an no support
# for such a configuration can be given.
escidoc-core.hibernate.transaction.manager_lookup_class=org.hibernate.transaction.JBossTransactionManagerLookup

# The JNDI name to get the JTA user transaction from the application server.
escidoc-core.jta.UserTransaction=UserTransaction

# The hibernate dialect that shall be used to access the database (database
# specific). For possible entries see javadoc of org.hibernate.dialect.Dialect.

#escidoc-core.hibernate.dialect=org.hibernate.dialect.MySQLDialect
escidoc-core.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


#
# SM Database Interface
#
# Valid entries are
# - DirectPostgresDatabaseAccessor
# - DirectMysqlDatabaseAccessor
# Use the appropriate entry for your choice of database system
# (either PostgreSQL or MySQL)
escidoc-core.sm.DirectDatabaseAccessor=DirectPostgresDatabaseAccessor

#
# Staging file properties
#
# The time in milliseconds during that a staging file is valid, i.e. during that
# it can be retrieved after being created. Default value is 1000 seconds.
escidoc-core.st.staging_file.valid_time=1000000
# The period of the staging file cleaner, defaults to 1 hour (3600000ms)
# Note: The first clean up will start after the first access to an
# infrastructure service.
escidoc-core.st.cleanup.period=3600000

#
# Digilib
#
escidoc-core.digilib.digicat-url=/DigilibClient/greyskin/digicat.jsp
digilib.digimage=http://localhost:8080/DigilibClient/greyskin/digimage-neu.jsp
# if the DigilibServer is deployed within the Tomcat of the Fedora
#digilib.scaler=http://localhost:8080/DigilibServer/Scaler
# if the DigilibServer is deployed within the JBoss
digilib.scaler=http://localhost:8080/DigilibServer/Scaler

#
# Algorithm to calculate the checksum for binary content.
# All values accepted by Fedora can be used: MD5, SHA-1, SHA-256, SHA-384, SHA-512, DISABLED
# The value "DISABLED" turnes checksum calculation off.
# Full supported in eSciDoc Infrastructure since Version 1.2.
#
# Fedora Doc: The valid values for the checksumType parameter for these three functions are: "MD5" "SHA-1" "SHA-256" 
# "SHA-384" "SHA-512" as above, but also "DISABLED" which will turn off checksumming..
#
escidoc-core.om.content.checksum-algorithm=MD5

#
# Default value for the number of search result records a filter method returns.
# This value will only be used for the database based filters (AA, OAI, statistics).
# The Lucene based filters have separate configuration files with an analog parameter.
escidoc-core.filter.default.maximumRecords=20

#
# HttpClient default configuration
#
# See also: http://hc.apache.org/httpcomponents-client-ga/tutorial/html/
#
# currently supported:
# http.connection.timeout=
# http.socket.timeout=

# 
# Set locations of ontology XML files (separated by space). 
# Comment out to use default ontologie (./ontologies/mpdl-ontologies/content-relations.xml). 
# An local path (e.g. /serviceXY/ontology.xml) is extended by infrastructure to a http reference to the 
# local installation (e.g http://selfUrl/service/ontology.xml). 
# escidoc-core.ontology.url = http://www.escidoc.org/ontologies/sample.xml http://www.escidoc.org/ontologies/test.xml 
